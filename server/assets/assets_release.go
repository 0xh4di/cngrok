package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd3\xb9\xb6\xaa\x48\x00\x85\xe1\x9c\xa7\xe8\x9c\xd5\x4b\xe4\x88\x48\x70\x83\x9a\x98\x0b\x2c\x86\x23\x90\x01\x0a\xca\x78\x14\xa1\x84\xa7\xef\xd5\x37\xe8\xa4\xef\x0e\xff\x78\x7f\x7f\xff\x3b\x48\x0c\xcb\xfb\x0b\x91\x20\xb2\x74\x0b\x81\x88\xfc\xae\x02\xb5\x2c\xf4\xd3\x20\x04\xd2\x03\x42\x0c\xf7\x7d\x01\xc6\xd2\xc9\x16\x39\x02\x1e\xac\xdb\xe7\xbd\x7d\x18\x1a\x97\x20\x60\xb1\x0e\x30\xf8\xa6\x01\xe5\x84\xa5\xf8\x9b\x31\x8c\xc1\x4f\x23\x14\xfd\x75\x2d\xe4\x69\x4e\x65\xed\x4d\xe1\x21\xc1\x11\x39\x50\xdc\x72\x6f\x03\x0a\x8d\x88\xe4\xeb\x63\x82\x23\xba\x52\x1c\x7f\xbc\xe6\xbf\xc6\xf5\x88\x44\x14\x12\x43\x00\xfb\x98\x00\xce\x9d\x54\x56\x86\xb2\xd7\x5e\x6e\xef\x2d\x45\x84\x10\x08\x2d\x8e\x59\x6a\x3b\x63\x66\xdd\x97\xd2\x03\x8c\x40\xc8\x00\xae\x6b\x72\x06\x18\x21\xc0\x46\x54\xd7\x04\x0a\x80\x16\x13\x46\x62\xb5\xc5\x8d\x39\xc8\xaf\xd1\xd8\x64\xdc\xdb\xbb\xac\x81\x4a\x71\x2b\xaf\xc1\x29\xea\x2e\xe7\xb5\x51\x0d\xcd\xe0\x53\xb0\x6f\x57\x28\xf6\x71\x96\x2a\x2a\xcd\xbd\xc4\xdb\x4e\xc2\xe6\xaf\x6d\x5d\x67\x83\xb6\x9c\xa0\xaa\x3c\x0f\xe7\xc7\xa9\xcf\xf7\xc7\xf7\xf3\x4c\xf5\x64\x67\x9f\x2f\xdd\x4f\x07\xce\xa7\xb4\x75\xf3\x8f\x6d\x2a\xa9\xa5\x69\x52\xf8\x05\x25\x57\x39\xcc\x93\x58\x4d\xc2\xbd\x98\x95\x0d\x2c\x01\x7a\x88\x7c\xfa\x64\x69\xf0\xc9\x59\xe1\x27\xee\x2c\xc1\x29\xc2\x51\x56\x43\xfd\x66\x06\x6e\xda\x3a\x45\x81\x8f\xf4\x55\x0e\x7a\x92\x29\x53\x13\xeb\xf5\x2b\x88\xdc\x4e\xe8\xd2\x84\x6c\x92\xaa\xc4\xfd\x19\x4d\xec\x7c\xe5\x72\x3c\x8b\xa1\x92\x44\xc6\xf7\xc4\xc2\xca\x6e\xa4\x4f\x2b\xa6\x8b\xa5\x3d\x5a\x60\xb4\xa3\xab\xef\xee\xd1\x65\x07\x16\xa2\x79\x1f\xfd\x68\xce\x82\x6e\x17\xe5\x71\xf5\x87\x3b\x6d\x0e\xb2\x79\x50\x1f\x57\x6a\xba\xe9\x7e\xc3\x85\x51\x9d\xea\x2a\xe7\x74\xd2\x2e\xae\x3b\x96\xec\x3a\x85\xe9\x20\x79\x9d\x37\xaa\x47\x83\x6a\x5c\xec\xb7\xeb\xdd\x12\x88\x19\xec\x33\xac\xae\xef\xba\x7a\xa0\x2c\x2f\xec\x8b\x08\xdd\xac\x44\x80\x13\x00\xfe\xf4\x05\xe0\x23\xc0\x08\x70\x92\x5e\xde\x68\x77\x15\x9c\x43\x1b\x56\x56\x8e\x7a\x3d\xe9\x82\x46\xca\xc2\xd0\x3a\x6a\x0a\xdd\x7f\x08\x3a\x74\xe1\xd3\xbe\x4b\x80\xdd\x96\x6a\xb9\xb4\xe7\x3c\x3d\xbe\x36\x6a\xaa\x2a\xe0\x59\x73\x4b\xbf\x5e\x25\xcc\x81\xe0\xc7\xd4\x28\x67\xad\x2f\x4b\x85\x4f\x43\xfe\xfd\xce\x54\xc9\x94\x70\xb3\x32\x51\xbe\x26\xf7\xf9\xf9\x55\x27\xa7\x19\x25\x06\xd3\x8c\x71\xbf\xad\xf4\x41\xd4\xda\x63\x1f\xd6\x2a\xf6\xee\xa0\xcd\xc2\x37\xbc\xd2\x1b\xe4\x13\x68\x76\x5c\x35\x5e\x86\xbf\xe1\xb1\x97\xf6\x9b\xf7\x50\xde\x6a\x91\x7c\xa9\xe6\xa0\x47\x3d\xad\xa6\xef\x30\x9b\x8b\x62\x22\x66\x5f\x34\x9a\xbb\x81\xf1\xa1\x29\xa8\xea\x05\x8e\xf2\x80\x59\xc3\xed\x86\xf7\x7e\x5c\x85\x85\x1f\xaf\xe6\x6b\x74\x7e\xde\x27\xbb\xd9\x5c\x51\x3c\xc6\x96\xc6\x9e\x17\xbe\x8e\x55\x2a\xef\x9c\xd0\xbf\xcc\xbd\x34\x41\xd4\x25\x7e\xe0\x3a\x65\x21\xc4\x5b\x98\x38\x49\xbe\x62\xf9\x7d\x85\x21\x5a\x33\x73\xa9\x96\xeb\xc5\xdd\x99\xa9\x33\xc4\xf3\x33\x84\xf9\x59\x7c\x52\x47\xd6\x12\xc9\x5d\x24\x2f\x7d\x64\xe2\xfb\xe8\x18\x16\x58\x7d\x36\xdb\xb6\x90\x89\xde\xa0\xf3\x5b\x77\x27\x2d\xa0\xfc\xd7\x2f\xe1\x37\x52\xe2\xe1\xff\xc3\xfd\x27\x00\x00\xff\xff\x6b\x58\x05\x15\xd5\x03\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 981, mode: os.FileMode(420), modTime: time.Unix(1536311514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\x25\x12\xe4\x00\x02\x85\x61\x9f\x53\x8c\x4f\x6d\x85\x49\x8c\x08\x33\xa7\x43\x2e\xcc\x1d\xec\xd0\xe9\xb7\x76\xf4\x3e\xfb\xcc\xef\xbe\xff\xfc\x6f\x9c\x28\xab\xd6\x1f\xcf\x67\xff\x38\x9e\x1a\xb2\x81\xf8\x47\x17\x93\x7f\x0f\x60\xaa\xaa\xb8\xb0\x2a\xc7\xb2\x3a\xcf\xba\x22\x7b\xff\x2e\xd3\x20\x20\xcb\x37\xab\x3a\xfb\x35\xb9\x93\xd8\xc9\x97\x99\x4c\x65\x3c\x88\x1b\x51\x6e\x3b\x4c\x20\xdd\xd9\x73\x38\xe7\x6f\x25\x0a\x54\x40\x21\x53\x6f\xec\xbf\xfb\x3d\x23\x05\xe6\xbc\x26\xa5\xfb\x3c\x37\xd5\x28\x74\x29\xe7\xb4\x35\xa0\xf1\xa4\x5b\xbc\xa2\x33\x7d\x85\x35\x3d\x30\x59\x34\x7d\x58\xe8\xee\xdc\x63\x13\x87\x7a\x6c\x7a\x00\xc3\x3c\xa3\x50\xdc\xf3\xdb\x91\x2f\x01\x3e\xd2\x8f\xfa\x9a\x3c\x23\xea\x06\xc5\xbf\xd2\xd8\x2a\xd2\xc2\xed\x44\xf1\xa3\x5c\xf9\x36\x2d\x6b\x62\xc5\x10\x2f\xc5\xa3\x73\x97\x63\x77\xe6\xe7\x78\x80\x22\x2c\xbf\xd3\x63\xb9\x11\x7f\x48\xe6\x2f\x0a\xdb\x22\x70\x82\x73\xf4\x13\x5a\xbf\x59\x06\x13\x52\x9f\x22\x8c\xb1\x34\xd3\xe8\xe6\x34\x7a\x72\x02\x39\x20\x3a\xba\x47\x75\x97\xcd\xfc\x66\x8f\x01\x50\xb2\x72\x9a\xa7\x03\x18\x13\xe3\xb9\xc2\x3f\xe3\xf1\x6e\x2a\x59\x89\x8f\xd3\x27\x75\xff\xd3\xe0\xab\x38\xfa\xd8\xb4\xf6\x14\x7a\x38\x66\x63\x9f\x17\x49\xf6\x5f\x7b\x73\xe8\xad\x75\xb5\x8b\x02\x1f\xb4\x3f\xe7\xe4\xc5\x04\x32\xb7\x50\xb1\x71\x4b\x25\x1c\x9c\x53\x47\x39\x50\xd5\xc6\x65\x1f\x73\x5c\x3c\xc6\x4b\x15\x58\x97\xe5\xd8\x59\xe5\x58\x97\xb7\xee\xd3\xbe\xda\x92\xfe\xd4\x93\x91\x03\x72\xc4\xb0\xe8\xda\x3a\x61\xd3\xd9\xea\xb7\xcb\xe3\x24\x9e\xf2\xb2\x21\xd3\x87\xae\x8e\x27\x1b\x93\x19\x49\xcc\xf8\xc6\x49\xc8\x2d\x42\xb0\x8f\x58\x93\x45\xe8\x52\xf3\xd7\x79\xcb\xa6\x96\xef\x80\x98\xdc\xf8\x56\x9c\xe4\x86\xb0\x47\xb1\x97\xab\x40\x79\x84\xdc\x89\x23\xf4\x0d\xd3\xc4\xbc\x30\x54\x27\xd4\x03\xf5\xa5\x0f\x38\x7f\xea\xa6\x3f\xef\x96\xf0\x21\xf1\x87\xeb\x52\x79\xb9\xdd\xca\x03\x9e\xfa\xa2\x6e\x8b\x52\xc5\x55\x85\x92\xb7\x0b\x23\x34\x21\xe9\xeb\x8f\x13\x2b\x7a\xfe\x68\x16\x1d\x21\x0e\xf8\xd2\x3b\x59\xc7\x6e\xb0\x57\x7d\xf6\x4e\x2e\x3d\x61\xc1\x77\xdf\xf0\x61\x33\x96\x01\xc9\x69\xd0\xa5\x9d\x7e\x58\xe1\xad\x2a\x4c\x15\x7e\x30\x74\x67\xe4\xa1\x33\x73\xcb\xc9\xf9\xd9\x93\xcc\x68\x1a\x81\x39\x13\x57\x77\x64\xfb\xa4\x9b\xdb\x83\xce\x2b\xc6\x83\x64\x1a\xcd\xf1\x08\x01\x25\xe5\xe2\x8e\x3c\xe6\x5a\xec\xa6\xc5\x8e\x11\x5b\x59\x8a\xae\x8e\x68\x3e\x94\xd5\x44\x1f\x97\xad\x8d\xe6\x89\x9a\x6b\xde\x14\x13\xd9\x15\xcc\xd7\xd5\xc0\xbc\xbe\x09\xd0\x8a\xeb\xe9\xbb\xfb\xc0\x7d\x5b\x52\xbd\x5e\x37\x3b\xcb\x1c\x6b\xdb\x52\x39\x6f\x25\x84\xc9\x07\x92\x41\x03\xb4\xb7\x5f\x52\xe6\x83\x19\x2b\x68\xfa\x43\x72\x20\xf5\x45\xd1\xb5\xf4\xcd\x17\xc3\x72\xb3\x5e\xf6\x88\x0a\x81\xc1\x25\x69\xfc\xa7\xb0\xa5\x34\xcc\x97\x46\xbc\x4b\x6a\x7a\x36\xbd\x31\x65\x53\xc1\xb3\x02\x5b\xb5\x81\x98\xf6\xaf\xda\x53\x92\x51\x84\x3e\x15\xa3\xf5\x36\x64\x8b\x01\x73\x66\x6d\xc8\xaa\x21\x81\xc5\x7b\x0e\x68\x68\x36\xe6\xdd\xed\xfc\x89\x6e\xd2\xb3\x62\x44\xf5\x5f\xb0\xef\x40\x84\xc2\xd8\x06\x55\x5f\xe7\xdb\x76\xad\xc1\xdd\x19\xe5\x77\xb9\x2b\x1d\x6f\xe7\x21\xff\x8a\x2d\xc8\x07\x74\x58\xe2\x85\x89\xde\xc2\x6d\x0e\xb0\xb5\x5a\xb0\xcc\x64\x39\x0b\x67\x18\x24\x42\x6c\x82\x09\x7b\x5c\x67\x5c\x8a\xbc\x09\xc3\x42\x7f\xd6\x47\x92\x6a\xe8\xc3\xe8\x6f\x09\x7e\x60\x8f\x79\x40\x0b\x60\x33\xa4\xd0\x38\x0c\xc2\xe7\x74\x95\x63\x84\x21\xe6\x43\x6b\x95\x6c\x97\x75\x53\xdb\x93\x63\xd3\xe7\x57\x30\xfc\x5c\xfd\xf2\xd8\x4f\xaf\x1a\xa5\x59\x14\xc9\x41\x8b\xf6\x09\xbe\x90\xf3\xd8\x06\xf0\x1a\xe0\x4b\x1b\xa8\xf8\x49\x7a\x81\x4c\x75\xe6\xe8\xe5\xdc\xed\x55\x03\xce\xce\x06\xbf\x89\x34\x54\xb8\x76\x1d\xdb\x9c\x9d\x65\x36\x84\x3f\x97\xe1\x41\x3f\x2e\x5e\x49\x6f\xac\x18\x72\x83\x59\xa0\x41\xb6\x4a\xd8\x7c\x67\x58\x40\x49\xb5\xa2\x5b\xf2\x44\x77\x5a\x67\x2c\x48\x68\x98\xad\xa4\x31\xd6\x9c\x40\xff\x75\xa9\x2d\x2a\x46\xa1\x9c\x4a\x6d\x9d\x61\x9a\x20\x8a\xba\x4d\x02\x94\xdb\x09\xb0\xbd\x07\x6e\x19\x83\xbe\x88\x94\xc1\xee\x0a\x17\x54\x43\xe2\x21\x8a\x6c\x16\x6e\x6e\x29\x6b\x66\xac\xac\xbc\xc3\x2e\xc1\xac\x7b\xb2\x5f\x9b\x48\x75\x2d\x1e\x95\x29\x26\x77\xa2\xf6\xa3\x60\x19\xd0\x85\xb5\xdf\xb3\x48\x4d\x40\x84\x29\x0d\x95\xbd\xca\xc8\x6e\xd7\x81\x6f\x12\x0e\x99\x3d\xb7\x19\x6c\x25\xd7\x02\x41\x0d\xf4\x42\x63\xed\x99\x39\xe1\xd8\xd9\xe1\x63\xc6\x1c\x14\x7a\xd4\x57\x07\xde\xc1\xda\xc2\xfe\x45\x71\x8d\x09\x1d\x07\xd7\xb0\x30\x0f\xa1\xb7\x90\xea\x60\x9d\x30\x68\x72\xb7\xe2\xe0\x5a\xa7\x67\x92\xa4\xf2\x20\xac\xd1\xbe\xad\xde\x31\xa0\x54\x21\xfd\x52\x68\x13\xe3\x00\xd1\xa7\xe5\x3b\x13\x1f\xf8\x38\x41\xcf\xcd\x3e\xea\xad\xd6\x77\xdb\xa1\x7e\xed\xbb\xdc\x0b\x67\xd1\x50\xcf\xd3\x51\xf6\x29\x83\xf9\x48\xe9\x17\x97\xde\x33\x27\x70\x4e\x08\xe8\xec\xc8\x13\x46\x06\x14\x0b\xff\x60\x97\xce\x35\xae\xc0\x0b\xcf\xfb\x65\xa2\xd2\x79\xe1\xfd\x77\x0d\x4c\xa6\xa1\xf2\x51\xa0\xfa\x0b\x46\x05\x09\x5e\xee\xd5\xb6\x0f\x46\x18\x23\xe3\xc5\xfd\xb9\xa9\x09\x47\x30\x6a\x0e\xd0\x05\xff\xe5\x86\x1c\xd3\x68\x8a\x9b\x45\x6b\x4f\xcc\xf2\xad\xd6\xa9\x3b\x1e\x56\xdc\xbf\x60\x3b\xf8\x18\x7a\xad\x82\xcb\xaa\xe4\x6e\x59\x41\x4a\xe7\xb0\xdf\xeb\xa6\x16\xa3\xd8\x37\x23\x27\x1c\x88\x22\x86\xba\x5f\xa7\xa2\x7a\x4d\xbe\xaf\x8f\xb6\x9e\x24\x96\x67\xd5\x50\xd0\x61\x32\x0d\xb6\x94\xea\x09\x96\xfd\x74\x23\xd7\x79\xf4\xae\x23\x4a\x78\xf5\xa8\x60\xff\xfe\x05\xfe\xb1\x22\x5a\xc2\xff\xe7\xe6\xbf\x01\x00\x00\xff\xff\xa9\x7a\x60\x54\x8f\x06\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1536311514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
